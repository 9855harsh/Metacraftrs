// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HarshBank {
    mapping(address => uint256) private balances;
    address public owner;

    constructor() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    function withdraw(uint256 amount) public {
        require(amount > 0, "Withdrawal amount must be greater than zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        
        uint256 initialBalance = address(this).balance;
        assert(initialBalance >= amount);

        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdrawal(msg.sender, amount);

        assert(address(this).balance == initialBalance - amount);
    }
    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
    
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(100), "New owner is the zero address");
        owner = newOwner;
    }
    
    function revertExample(uint256 x) public pure {
        if (x == 0) {
            revert("Input cannot be zero");
        }
    }
}
